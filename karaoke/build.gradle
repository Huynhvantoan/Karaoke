apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'
//apply plugin: 'androidx.navigation.safeargs'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    compileSdkVersion build_versions.compileSdk
    defaultConfig {
        applicationId build_versions.app_id
        minSdkVersion build_versions.minSdk
        targetSdkVersion build_versions.targetSdk
        versionCode build_versions.versionCode
        versionName build_versions.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    if(projects.hasProperty('devBuild')){
        splits.splits.abi.enable = false
        splits.splits.density.enable = false
        splits.aaptOptions.cruncherEnabled =false
    }

    signingConfigs {
        Key {
            try {
                storeFile file(key_store.keystore)
                storePassword key_store.keystorePass
                keyAlias key_store.alias
                keyPassword key_store.aliasPass
            }
            catch (ignored) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }

    buildTypes {
        debug {
            buildConfigField "String", "BASE_URL", '"http://192.168.100.122/dejavu/"'
            buildConfigField "String", "BASE_URL_LOG", '"http://karaoke.skymusic.com.vn/"'
            buildConfigField "String", "HOST", '"identify-ap-southeast-1.acrcloud.com"'
            buildConfigField "String", "ACCESS_KEY", '"98792dc4b50fd8b140f977ff4251374b"'
            buildConfigField "String", "ACCESS_SECRET", '"RybGa6skfvd6JGMx59eWs91BZLeEZj7pqRkO4LHU"'
            buildConfigField "String", "OP", '"1"'
            buildConfigField "String", "CLIENT_KEY", '"kct171101"'
            buildConfigField "String", "CLIENT_SECRET", '"e4d5962539f7a6fa691e1cfb81b73cf3"'
            applicationIdSuffix ".debug"
            debuggable true
        }
        release {
            buildConfigField "String", "BASE_URL", '"https://35.240.214.197/dejavu/"'
            buildConfigField "String", "BASE_URL_LOG", '"http://karaoke.skymusic.com.vn/"'
            buildConfigField "String", "HOST", '"identify-ap-southeast-1.acrcloud.com"'
            buildConfigField "String", "ACCESS_KEY", '"98792dc4b50fd8b140f977ff4251374b"'
            buildConfigField "String", "ACCESS_SECRET", '"RybGa6skfvd6JGMx59eWs91BZLeEZj7pqRkO4LHU"'
            buildConfigField "String", "OP", '"1"'
            buildConfigField "String", "CLIENT_KEY", '"kct171101"'
            buildConfigField "String", "CLIENT_SECRET", '"e4d5962539f7a6fa691e1cfb81b73cf3"'
            signingConfig signingConfigs.Key
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    key_store.proguard_rules, key_store.proguard_rx, key_store.proguard_square, key_store.proguard_support
        }
    }

    lintOptions {
        textOutput "stdout"
        textReport true
        checkAllWarnings true
        warningsAsErrors true
        showAll true
        explainIssues true
        abortOnError false
        lintConfig file("$projectDir/lint.xml")
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
        exclude 'META-INF/license/LICENSE.base64.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/MANIFEST.MF'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
        maxProcessCount 4
        preDexLibraries false
        javaMaxHeapSize "8g"
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "karaoke_v${defaultConfig.versionName}_${getDate()}.apk"
                outputFileName = fileName
            }
        }
    }
    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res-main',
                    file('src/main/res-screen')
                            .listFiles()
                            .each { res.srcDirs += it.path }
            ]
        }
    }
    androidExtensions {
        experimental = true
    }
    dataBinding {
        enabled = true
    }
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':Core')
    // Kotlin
    implementation deps.kotlin.stdlib
    // Support libraries
    for (dependency in deps.support) {
        implementation dependency.value
    }
    //Core
    for (dependency in deps.core) {
        implementation dependency.value
    }
    // Architecture components
    for (dependency in deps.lifecycle) {
        implementation dependency.value
    }
    // Dagger 2
    for (dependency in deps.dagger) {
        implementation dependency.value
    }
    //Compiler
    for (dependency in deps.compiler) {
        kapt dependency.value
    }
    //Retrofit
    for (dependency in deps.retrofit) {
        implementation dependency.value
    }
    implementation(deps.libCore.ok_httpLogging, {
        exclude group: 'org.json', module: 'json'
    })
    implementation(deps.libCore.permisstion, {
        exclude module: "support-v13"
    })
    implementation(deps.libCore.glide_recycler, {
        transitive = false
    })
    //Image Loading
    for (dependency in deps.glide) {
        implementation dependency.value
    }
    //Utils
    for (dependency in deps.utils) {
        implementation dependency.value
    }
    //Library
    implementation 'com.github.Jay-Goo:WaveLineView:v1.0.3'
    implementation deps.work.runtime
}

@SuppressWarnings("GrMethodMayBeStatic")
def getDate() {
    new Date().format('MMddyyyy')
}